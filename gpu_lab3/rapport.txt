1. Optimizing memory accesses
	1. 9 (la cellule et 8 voisins)
		Certaines cellules sont lues plusieurs fois. Ce ne sont donc pas des lectures **coalesced**
	2. 
	x = blockIdx.x * blockDim.x + threadIdx.x;
	y = blockIdx.y;
	-------------------------------------------
	x = blockIdx.x * blockDim.x + threadIdx.x;
	y = blockIdx.y + 1;
	-------------------------------------------
	x = blockIdx.x * blockDim.x + threadIdx.x - 1;
	y = blockIdx.y + 1;
	-------------------------------------------
	x = blockIdx.x * blockDim.x + threadIdx.x + 1;
	y = blockIdx.y + 1;
	-------------------------------------------
	x = blockIdx.x * blockDim.x + threadIdx.x - 1;
	y = blockIdx.y;
	-------------------------------------------
	x = blockIdx.x * blockDim.x + threadIdx.x + 1;
	y = blockIdx.y;
	-------------------------------------------
	x = blockIdx.x * blockDim.x + threadIdx.x;
	y = blockIdx.y - 1;
	-------------------------------------------
	x = blockIdx.x * blockDim.x + threadIdx.x - 1;
	y = blockIdx.y - 1;
	-------------------------------------------
	x = blockIdx.x * blockDim.x + threadIdx.x + 1;
	y = blockIdx.y - 1;
	-------------------------------------------
	
	3.
	x = blockIdx.x * blockDim.x + threadIdx.x;
	y = blockIdx.y * blockDim.y + threadIdx.y;
	-------------------------------------------
	x = blockIdx.x * blockDim.x + threadIdx.x;
	y = blockIdx.y * blockDim.y + threadIdx.y + 1;
	-------------------------------------------
	x = blockIdx.x * blockDim.x + threadIdx.x - 1;
	y = blockIdx.y * blockDim.y + threadIdx.y + 1;
	-------------------------------------------
	x = blockIdx.x * blockDim.x + threadIdx.x + 1;
	y = blockIdx.y * blockDim.y + threadIdx.y + 1;
	-------------------------------------------
	x = blockIdx.x * blockDim.x + threadIdx.x - 1;
	y = blockIdx.y * blockDim.y + threadIdx.y;
	-------------------------------------------
	x = blockIdx.x * blockDim.x + threadIdx.x + 1;
	y = blockIdx.y * blockDim.y + threadIdx.y;
	-------------------------------------------
	x = blockIdx.x * blockDim.x + threadIdx.x;
	y = blockIdx.y * blockDim.y + threadIdx.y - 1;
	-------------------------------------------
	x = blockIdx.x * blockDim.x + threadIdx.x - 1;
	y = blockIdx.y * blockDim.y + threadIdx.y - 1;
	-------------------------------------------
	x = blockIdx.x * blockDim.x + threadIdx.x + 1;
	y = blockIdx.y * blockDim.y + threadIdx.y - 1;
	-------------------------------------------
	